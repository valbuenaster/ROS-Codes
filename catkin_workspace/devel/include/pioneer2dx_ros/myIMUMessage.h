// Generated by gencpp from file pioneer2dx_ros/myIMUMessage.msg
// DO NOT EDIT!


#ifndef PIONEER2DX_ROS_MESSAGE_MYIMUMESSAGE_H
#define PIONEER2DX_ROS_MESSAGE_MYIMUMESSAGE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Quaternion.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>

namespace pioneer2dx_ros
{
template <class ContainerAllocator>
struct myIMUMessage_
{
  typedef myIMUMessage_<ContainerAllocator> Type;

  myIMUMessage_()
    : entity_name()
    , sec(0.0)
    , nsec(0.0)
    , orientation()
    , angular_velocity()
    , linear_acceleration()  {
    }
  myIMUMessage_(const ContainerAllocator& _alloc)
    : entity_name(_alloc)
    , sec(0.0)
    , nsec(0.0)
    , orientation(_alloc)
    , angular_velocity(_alloc)
    , linear_acceleration(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _entity_name_type;
  _entity_name_type entity_name;

   typedef double _sec_type;
  _sec_type sec;

   typedef double _nsec_type;
  _nsec_type nsec;

   typedef  ::geometry_msgs::Quaternion_<ContainerAllocator>  _orientation_type;
  _orientation_type orientation;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _angular_velocity_type;
  _angular_velocity_type angular_velocity;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _linear_acceleration_type;
  _linear_acceleration_type linear_acceleration;





  typedef boost::shared_ptr< ::pioneer2dx_ros::myIMUMessage_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pioneer2dx_ros::myIMUMessage_<ContainerAllocator> const> ConstPtr;

}; // struct myIMUMessage_

typedef ::pioneer2dx_ros::myIMUMessage_<std::allocator<void> > myIMUMessage;

typedef boost::shared_ptr< ::pioneer2dx_ros::myIMUMessage > myIMUMessagePtr;
typedef boost::shared_ptr< ::pioneer2dx_ros::myIMUMessage const> myIMUMessageConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pioneer2dx_ros::myIMUMessage_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pioneer2dx_ros::myIMUMessage_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace pioneer2dx_ros

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/melodic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'pioneer2dx_ros': ['/home/luis/catkin_workspace/src/pioneer2dx_ros/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::pioneer2dx_ros::myIMUMessage_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pioneer2dx_ros::myIMUMessage_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pioneer2dx_ros::myIMUMessage_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pioneer2dx_ros::myIMUMessage_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pioneer2dx_ros::myIMUMessage_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pioneer2dx_ros::myIMUMessage_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pioneer2dx_ros::myIMUMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "03337626308ac1d60c46fa084c8af8ef";
  }

  static const char* value(const ::pioneer2dx_ros::myIMUMessage_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x03337626308ac1d6ULL;
  static const uint64_t static_value2 = 0x0c46fa084c8af8efULL;
};

template<class ContainerAllocator>
struct DataType< ::pioneer2dx_ros::myIMUMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pioneer2dx_ros/myIMUMessage";
  }

  static const char* value(const ::pioneer2dx_ros::myIMUMessage_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pioneer2dx_ros::myIMUMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string entity_name\n"
"float64 sec\n"
"float64 nsec\n"
"geometry_msgs/Quaternion orientation\n"
"geometry_msgs/Vector3 angular_velocity\n"
"geometry_msgs/Vector3 linear_acceleration\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::pioneer2dx_ros::myIMUMessage_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pioneer2dx_ros::myIMUMessage_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.entity_name);
      stream.next(m.sec);
      stream.next(m.nsec);
      stream.next(m.orientation);
      stream.next(m.angular_velocity);
      stream.next(m.linear_acceleration);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct myIMUMessage_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pioneer2dx_ros::myIMUMessage_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pioneer2dx_ros::myIMUMessage_<ContainerAllocator>& v)
  {
    s << indent << "entity_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.entity_name);
    s << indent << "sec: ";
    Printer<double>::stream(s, indent + "  ", v.sec);
    s << indent << "nsec: ";
    Printer<double>::stream(s, indent + "  ", v.nsec);
    s << indent << "orientation: ";
    s << std::endl;
    Printer< ::geometry_msgs::Quaternion_<ContainerAllocator> >::stream(s, indent + "  ", v.orientation);
    s << indent << "angular_velocity: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.angular_velocity);
    s << indent << "linear_acceleration: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.linear_acceleration);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PIONEER2DX_ROS_MESSAGE_MYIMUMESSAGE_H
